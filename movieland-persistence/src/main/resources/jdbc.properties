jdbc.driver.classname=org.postgresql.Driver
jdbc.url=jdbc:postgresql://localhost:5432/movieland
jdbc.username=dev
jdbc.password=504313
jdbc.data.path=/db/data/

jdbc.sql.find.all.genres=\
  SELECT id \
       , name \
    FROM genre

jdbc.sql.find.genre.by.id=\
  SELECT id \
       , name \
    FROM genre \
   WHERE id = ?

jdbc.sql.find.all.countries=\
  SELECT id \
       , name \
    FROM country

jdbc.sql.find.country.by.id=\
  SELECT id \
       , name \
    FROM country \
   WHERE id = ?

jdbc.sql.find.all.movies=\
  SELECT id \
       , name \
       , name_original \
       , year \
       , description \
       , rating \
       , price \
    FROM movie

jdbc.sql.find.all.movies.batch=\
  SELECT m.id \
       , m.name \
       , m.name_original \
       , m.year \
       , m.description \
       , m.rating \
       , m.price \
       , mgc.genres \
       , mgc.countries \
    FROM movie m \
    JOIN \
        (SELECT id \
              , genres \
              , string_agg(mc.country_id || '', ', ' ORDER BY mc.country_id) countries \
           FROM (SELECT id \
                      , string_agg(mg.genre_id || '', ', ' ORDER BY mg.genre_id) genres \
                   FROM movie m \
                   JOIN movie_genre mg \
                     ON mg.movie_id = m.id \
                  GROUP BY id \
                 ) m \
           JOIN movie_country mc \
             ON mc.movie_id = m.id \
          GROUP BY id, genres \
        ) mgc \
      ON mgc.id = m.id

jdbc.sql.find.movie.by.id=\
  SELECT id \
       , name \
       , name_original \
       , year \
       , description \
       , rating \
       , price \
    FROM movie \
   WHERE id = ?

jdbc.sql.find.movie.by.id.batch=\
  SELECT m.id \
       , m.name \
       , m.name_original \
       , m.year \
       , m.description \
       , m.rating \
       , m.price \
       , mgc.genres \
       , mgc.countries \
    FROM movie m \
    JOIN \
        (SELECT id \
              , genres \
              , string_agg(mc.country_id || '', ', ' ORDER BY mc.country_id) countries \
           FROM (SELECT id \
                      , string_agg(mg.genre_id || '', ', ' ORDER BY mg.genre_id) genres \
                   FROM movie m \
                   JOIN movie_genre mg \
                     ON mg.movie_id = m.id \
                  GROUP BY id \
                 ) m \
           JOIN movie_country mc \
             ON mc.movie_id = m.id \
          GROUP BY id, genres \
        ) mgc \
      ON mgc.id = m.id \
   WHERE m.id = ?

jdbc.sql.find.movies.by.genre.predicate=\
(exists( \
  select null \
    from movie_genre mg \
    join genre g \
      on g.id = mg.genre_id \
   where mg.movie_id = movie.id \
     and UPPER(g.name) = UPPER('%s') \
))

jdbc.sql.find.movies.by.title.predicate=\
( \
 UPPER(movie.name) LIKE UPPER('%s') \
 OR \
 UPPER(movie.name_original) LIKE UPPER('%s') \
)

jdbc.sql.find.movies.by.year.predicate=movie.year = %s

jdbc.sql.find.movies.by.country.predicate=\
(exists( \
 select null \
   from movie_country mc \
   join country c \
     on c.id = mc.country_id \
  where mc.movie_id = movie.id \
    and UPPER(c.name) = UPPER('%s') \
))

jdbc.sql.find.genres.by.movie.id=\
  SELECT g.id \
       , g.name \
    FROM genre g \
    JOIN movie_genre mg \
      ON mg.genre_id = g.id \
   WHERE mg.movie_id = ?

jdbc.sql.find.countries.by.movie.id=\
  SELECT c.id \
       , c.name \
    FROM country c \
    JOIN movie_country mc \
      ON mc.country_id = c.id \
   WHERE mc.movie_id = ?

jdbc.sql.find.all.users=\
  SELECT id \
       , name \
       , email \
       , password \
       , role \
    FROM users

jdbc.sql.find.user.by.id=\
  SELECT id \
       , name \
       , email \
       , password \
       , role \
    FROM users \
   WHERE id = ?

jdbc.sql.find.user.by.email.password=\
  SELECT id \
       , name \
       , email \
       , password \
       , role \
    FROM users \
   WHERE email = ? and password = ?

jdbc.sql.find.all.reviews=\
  SELECT movie_id \
       , reviewer_id \
       , feedback \
    FROM review

jdbc.sql.find.reviews.by.movie.id=\
  SELECT movie_id \
       , reviewer_id \
       , feedback \
    FROM review \
   WHERE movie_id=?

